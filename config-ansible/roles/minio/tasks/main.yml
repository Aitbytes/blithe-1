---
- name: Create Service base config directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ docker_base_dir }}/compose/minio"
    - "{{ minio_data_dir }}"
    - "{{ minio_config_dir }}"

- name: Copy config files
  template:
    src: "{{ item.src }}"
    dest: "{{ docker_base_dir }}{{ item.dest }}"
    mode: '0644'
  loop:
    - { "src": "docker-compose.yml.j2", "dest": "/compose/minio/docker-compose.yml"}

- name: Copy azeon policy file
  template:
    src: "azeon-policy.json.j2"
    dest: "{{ minio_config_dir }}/azeon-policy.json"
    mode: '0644'

- name: Copy terraform backend policy file
  template:
    src: "terraform-backend-policy.json.j2"
    dest: "{{ minio_config_dir }}/terraform-backend-policy.json"
    mode: '0644'

- name: Run Docker compose stack
  community.docker.docker_compose_v2:
    project_src: "{{ docker_base_dir }}/compose/minio/"
    files:
      - docker-compose.yml
    state: present
    pull: missing
    recreate: always
  become: true


- name: Configure mc alias
  community.docker.docker_container_exec:
    container: minio
    command: "mc alias set minio http://localhost:9000 {{ minio_root_user }} {{ minio_root_password }}"
  changed_when: false

- name: Check if user '{{ minio_azeon_user }}' already exists
  community.docker.docker_container_exec:
    container: minio
    command: "mc admin user info minio {{ minio_azeon_user }}"
  register: azeon_user_check
  ignore_errors: true
  changed_when: false

- name: Generate random password for '{{ minio_azeon_user }}'
  set_fact:
    minio_azeon_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters,digits') }}"
  when: azeon_user_check.rc != 0

- name: Create user '{{ minio_azeon_user }}'
  community.docker.docker_container_exec:
    container: minio
    command: "mc admin user add minio {{ minio_azeon_user }} {{ minio_azeon_password }}"
  when: azeon_user_check.rc != 0

- name: Check if bucket '{{ minio_azeon_bucket }}' exists
  community.docker.docker_container_exec:
    container: minio
    command: "mc ls minio/{{ minio_azeon_bucket }}"
  register: azeon_bucket_check
  ignore_errors: true
  changed_when: false

- name: Create bucket '{{ minio_azeon_bucket }}'
  community.docker.docker_container_exec:
    container: minio
    command: "mc mb minio/{{ minio_azeon_bucket }}"
  when: azeon_bucket_check.rc != 0

- name: Create policy for '{{ minio_azeon_bucket }}' bucket
  community.docker.docker_container_exec:
    container: minio
    command: "mc admin policy create minio rw-{{ minio_azeon_bucket }} /root/.minio/azeon-policy.json"
  changed_when: false

- name: Set policy for user '{{ minio_azeon_user }}'
  community.docker.docker_container_exec:
    container: minio
    command: "mc admin policy attach minio rw-{{ minio_azeon_bucket }} --user {{ minio_azeon_user }}"
  changed_when: false

- name: Check if Minio user credentials exist and match in Vault
  uri:
    url: "{{ vault_url }}/v1/kv/data/blithe/docker/minio"
    method: GET
    headers:
      X-Vault-Token: "{{ vault_token }}"
    validate_certs: false
    status_code: 200, 404
  register: vault_secret_check
  when: azeon_user_check.rc != 0

- name: Save Minio user credentials to Vault
  uri:
    url: "{{ vault_url }}/v1/kv/data/blithe/docker/minio"
    method: POST
    headers:
      X-Vault-Token: "{{ vault_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      data:
          access_key: "{{ minio_azeon_user }}"
          secret_key: "{{ minio_azeon_password }}"
    validate_certs: false
    status_code: 200
  when:
    - azeon_user_check.rc != 0
    - vault_secret_check.status == 404 or
      (vault_secret_check.status == 200 and
       (vault_secret_check.json.data.data.access_key | default('') != minio_azeon_user or
        vault_secret_check.json.data.data.secret_key | default('') != minio_azeon_password))

- name: Check if user '{{ minio_terraform_user }}' already exists
  community.docker.docker_container_exec:
    container: minio
    command: "mc admin user info minio {{ minio_terraform_user }}"
  register: terraform_user_check
  ignore_errors: true
  changed_when: false

- name: Generate random password for '{{ minio_terraform_user }}'
  set_fact:
    minio_terraform_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters,digits') }}"
  when: terraform_user_check.rc != 0

- name: Create user '{{ minio_terraform_user }}'
  community.docker.docker_container_exec:
    container: minio
    command: "mc admin user add minio {{ minio_terraform_user }} {{ minio_terraform_password }}"
  when: terraform_user_check.rc != 0

- name: Check if bucket '{{ minio_terraform_bucket }}' exists
  community.docker.docker_container_exec:
    container: minio
    command: "mc ls minio/{{ minio_terraform_bucket }}"
  register: terraform_bucket_check
  ignore_errors: true
  changed_when: false

- name: Create bucket '{{ minio_terraform_bucket }}'
  community.docker.docker_container_exec:
    container: minio
    command: "mc mb minio/{{ minio_terraform_bucket }}"
  when: terraform_bucket_check.rc != 0

- name: Create policy for '{{ minio_terraform_bucket }}' bucket
  community.docker.docker_container_exec:
    container: minio
    command: "mc admin policy create minio rw-{{ minio_terraform_bucket }} /root/.minio/terraform-backend-policy.json"
  changed_when: false

- name: Set policy for user '{{ minio_terraform_user }}'
  community.docker.docker_container_exec:
    container: minio
    command: "mc admin policy attach minio rw-{{ minio_terraform_bucket }} --user {{ minio_terraform_user }}"
  changed_when: false

- name: Check if Minio terraform user credentials exist and match in Vault
  uri:
    url: "{{ vault_url }}/v1/kv/data/blithe/minio/terraform-backend"
    method: GET
    headers:
      X-Vault-Token: "{{ vault_token }}"
    validate_certs: false
    status_code: 200, 404
  register: vault_terraform_secret_check
  when: terraform_user_check.rc != 0

- name: Save Minio terraform user credentials to Vault
  uri:
    url: "{{ vault_url }}/v1/kv/data/blithe/minio/terraform-backend"
    method: POST
    headers:
      X-Vault-Token: "{{ vault_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      data:
          access_key: "{{ minio_terraform_user }}"
          secret_key: "{{ minio_terraform_password }}"
    validate_certs: false
    status_code: 200
  when:
    - terraform_user_check.rc != 0
    - vault_terraform_secret_check.status == 404 or
      (vault_terraform_secret_check.status == 200 and
       (vault_terraform_secret_check.json.data.data.access_key | default('') != minio_terraform_user or
        vault_terraform_secret_check.json.data.data.secret_key | default('') != minio_terraform_password))
